{"ast":null,"code":"var _jsxFileName = \"/Users/vedshivade/Documents/GitHub/blazepath_app_repo/frontend/src/components/LeafletMap.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { MapContainer, TileLayer, Polyline, Marker, GeoJSON, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../styles/LeafletMap.css\";\nimport geoJsonData from '../data/allFirePerims.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst setColor = ({\n  properties\n}) => {\n  return {\n    weight: 1,\n    fillColor: \"FF6912\"\n  };\n};\n\n// Prevent the Polyline from disappearing on pan/zoom\nconst RouteLayer = ({\n  route\n}) => {\n  _s();\n  const [routeCoords, setRouteCoords] = useState([]);\n  const map = useMap(); // Access the map instance\n\n  useEffect(() => {\n    if (!(route !== null && route !== void 0 && route.from) || !(route !== null && route !== void 0 && route.to)) return;\n    const fetchRoute = async () => {\n      try {\n        const response = await fetch(`https://router.project-osrm.org/route/v1/driving/${route.from.lng},${route.from.lat};${route.to.lng},${route.to.lat}?overview=full&geometries=geojson`);\n        const data = await response.json();\n        if (data.routes.length > 0) {\n          const coordinates = data.routes[0].geometry.coordinates.map(([lng, lat]) => ({\n            lat,\n            lng\n          }));\n          setRouteCoords(coordinates);\n        } else {\n          alert(\"No route found!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching route:\", error);\n      }\n    };\n    fetchRoute();\n  }, [route]); // Run only when the route changes\n\n  return routeCoords.length > 0 ? /*#__PURE__*/_jsxDEV(Polyline, {\n    positions: routeCoords,\n    color: \"blue\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 35\n  }, this) : null;\n};\n_s(RouteLayer, \"sBMR5j+PTN1Rv9LL1RXw9Yl2ue8=\", false, function () {\n  return [useMap];\n});\n_c = RouteLayer;\nconst LeafletMap = ({\n  route,\n  selectedFactor\n}) => {\n  _s2();\n  const mapRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [34.0365485, -118.2507257],\n      zoom: 10,\n      className: \"map\",\n      whenCreated: map => mapRef.current = map // Store map instance\n      ,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), (route === null || route === void 0 ? void 0 : route.from) && /*#__PURE__*/_jsxDEV(Marker, {\n        position: route.from\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this), (route === null || route === void 0 ? void 0 : route.to) && /*#__PURE__*/_jsxDEV(Marker, {\n        position: route.to\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(RouteLayer, {\n        route: route\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: geoJsonData,\n        style: setColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s2(LeafletMap, \"eZwvXZNGrOinO8i65lLhOza0GRY=\");\n_c2 = LeafletMap;\nexport default LeafletMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"RouteLayer\");\n$RefreshReg$(_c2, \"LeafletMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","MapContainer","TileLayer","Polyline","Marker","GeoJSON","useMap","geoJsonData","jsxDEV","_jsxDEV","setColor","properties","weight","fillColor","RouteLayer","route","_s","routeCoords","setRouteCoords","map","from","to","fetchRoute","response","fetch","lng","lat","data","json","routes","length","coordinates","geometry","alert","error","console","positions","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","LeafletMap","selectedFactor","_s2","mapRef","className","children","center","zoom","whenCreated","current","url","attribution","position","style","_c2","$RefreshReg$"],"sources":["/Users/vedshivade/Documents/GitHub/blazepath_app_repo/frontend/src/components/LeafletMap.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { MapContainer, TileLayer, Polyline, Marker, GeoJSON, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../styles/LeafletMap.css\";\nimport geoJsonData from '../data/allFirePerims.json';\n\nconst setColor = ({ properties }) => {\n  return { weight: 1, fillColor: \"FF6912\" };\n};\n\n// Prevent the Polyline from disappearing on pan/zoom\nconst RouteLayer = ({ route }) => {\n  const [routeCoords, setRouteCoords] = useState([]);\n  const map = useMap(); // Access the map instance\n\n  useEffect(() => {\n    if (!route?.from || !route?.to) return;\n\n    const fetchRoute = async () => {\n      try {\n        const response = await fetch(\n          `https://router.project-osrm.org/route/v1/driving/${route.from.lng},${route.from.lat};${route.to.lng},${route.to.lat}?overview=full&geometries=geojson`\n        );\n        const data = await response.json();\n\n        if (data.routes.length > 0) {\n          const coordinates = data.routes[0].geometry.coordinates.map(([lng, lat]) => ({ lat, lng }));\n          setRouteCoords(coordinates);\n        } else {\n          alert(\"No route found!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching route:\", error);\n      }\n    };\n\n    fetchRoute();\n  }, [route]); // Run only when the route changes\n\n  return routeCoords.length > 0 ? <Polyline positions={routeCoords} color=\"blue\" /> : null;\n};\n\nconst LeafletMap = ({ route, selectedFactor }) => {\n  const mapRef = useRef(null);\n\n  return (\n    <div className=\"map-container\">\n      <MapContainer\n        center={[34.0365485, -118.2507257]}\n        zoom={10}\n        className=\"map\"\n        whenCreated={(map) => (mapRef.current = map)} // Store map instance\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; OpenStreetMap contributors\"\n        />\n        {route?.from && <Marker position={route.from} />}\n        {route?.to && <Marker position={route.to} />}\n        <RouteLayer route={route} />\n        <GeoJSON data={geoJsonData} style={setColor} />\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default LeafletMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}