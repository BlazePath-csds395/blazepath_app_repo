{"ast":null,"code":"var _jsxFileName = \"/Users/vedshivade/Documents/GitHub/blazepath_app_repo/frontend/src/components/LeafletMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, GeoJSON, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../styles/LeafletMap.css\";\nimport geoJsonData from '../data/allFirePerims.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst setColor = ({\n  properties\n}) => {\n  return {\n    weight: 1,\n    fillColor: \"FF6912\"\n  };\n};\n\n// Component to update the map center when an address is selected\nconst MapUpdater = ({\n  selectedAddress\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (selectedAddress) {\n      map.setView([selectedAddress.lat, selectedAddress.lng], 14);\n    }\n  }, [selectedAddress, map]);\n  return null;\n};\n_s(MapUpdater, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = MapUpdater;\nconst LeafletMap = ({\n  selectedFactor,\n  selectedAddress\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [34.0365485, -118.2507257],\n      zoom: 10,\n      className: \"map\",\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: geoJsonData,\n        style: setColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), selectedAddress && /*#__PURE__*/_jsxDEV(MapUpdater, {\n        selectedAddress: selectedAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-button\",\n        children: \"\\uD83D\\uDCCD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-button\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-button\",\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-button\",\n        children: \"\\uD83D\\uDC64\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c2 = LeafletMap;\nexport default LeafletMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapUpdater\");\n$RefreshReg$(_c2, \"LeafletMap\");","map":{"version":3,"names":["React","useEffect","useRef","MapContainer","TileLayer","GeoJSON","useMap","geoJsonData","jsxDEV","_jsxDEV","setColor","properties","weight","fillColor","MapUpdater","selectedAddress","_s","map","setView","lat","lng","_c","LeafletMap","selectedFactor","className","children","center","zoom","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","data","style","_c2","$RefreshReg$"],"sources":["/Users/vedshivade/Documents/GitHub/blazepath_app_repo/frontend/src/components/LeafletMap.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { MapContainer, TileLayer, GeoJSON, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../styles/LeafletMap.css\";\nimport geoJsonData from '../data/allFirePerims.json';\n\nconst setColor = ({ properties }) => {\n  return { weight: 1, fillColor: \"FF6912\" };\n};\n\n// Component to update the map center when an address is selected\nconst MapUpdater = ({ selectedAddress }) => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (selectedAddress) {\n      map.setView([selectedAddress.lat, selectedAddress.lng], 14);\n    }\n  }, [selectedAddress, map]);\n\n  return null;\n};\n\nconst LeafletMap = ({ selectedFactor, selectedAddress }) => {\n  return (\n    <div className=\"map-container\">\n      <MapContainer center={[34.0365485, -118.2507257]} zoom={10} className=\"map\">\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; OpenStreetMap contributors\"\n        />\n        <GeoJSON data={geoJsonData} style={setColor} />\n        {selectedAddress && <MapUpdater selectedAddress={selectedAddress} />}\n      </MapContainer>\n      <div className=\"map-controls\">\n        <button className=\"control-button\">üìç</button>\n        <button className=\"control-button\">+</button>\n        <button className=\"control-button\">-</button>\n        <button className=\"control-button\">üë§</button>\n      </div>\n    </div>\n  );\n};\n\nexport default LeafletMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}